@page "/account/myorders"
@using Tribulus.MarketPlace.Localization
@using Tribulus.MarketPlace.Orders
@using Tribulus.MarketPlace.Permissions

@inject IOrderAppService OrderAppService
@inherits MarketPlaceComponentBase

<Card>
    <CardHeader>
        <h2>@L["MyOrders"]</h2>
    </CardHeader>
    <CardBody>
        <div id="FilterSection" class="row mt-3">

            <Column ColumnSize="ColumnSize.Is12">
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <TextEdit TValue="string" KeyPress="OnKeyPress" @bind-Text="@Filter.Name" />
                </Field>
            </Column>

        </div>
        @*</Form>*@
        @* ************************* DATA GRID ************************* *@
        <DataGrid TItem="OrderDto"
                  Data="OrderList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="OrderDto"
                                Field="Name"
                                Caption="@L["Name"]">
                </DataGridColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="TotalValue"
                                Caption="@L["Total"]">
                </DataGridColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="State"
                                Caption="@L["State"]">
                </DataGridColumn>               
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@code {
    private OrderFilterDto Filter { get; set; }
    private IReadOnlyList<OrderDto> OrderList { get; set; }
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private int PageSize { get; }


    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetOrderssAsync();
        }
    }
    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<OrderDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;
        await GetOrderssAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetOrderssAsync()
    {
        Filter.SkipCount = PageSize * CurrentPage;
        Filter.MaxResultCount = PageSize;
        Filter.Sorting = CurrentSorting;

        var result = await OrderAppService.GetOrdersAsync(Filter);
        OrderList = result.Items;
        TotalCount = (int)result.TotalCount;


    }
}