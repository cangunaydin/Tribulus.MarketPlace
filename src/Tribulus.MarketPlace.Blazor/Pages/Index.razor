@page "/"
@using Tribulus.MarketPlace.Localization
@using Tribulus.MarketPlace.Orders
@using Tribulus.MarketPlace.Permissions
@using Tribulus.MarketPlace.Products
@using Blazorise.Snackbar
@inject IOrderAppService OrderAppService
@inject NavigationManager UriHelper
@inherits MarketPlaceComponentBase
@inject AbpBlazorMessageLocalizerHelper<MarketPlaceResource> LH
<Card>
    <CardHeader>
        @* ************************* PAGE HEADER ************************* *@
        <Row>
            <Column ColumnSize="ColumnSize.Is9">
                <h2>@L["Products"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.Is3" Flex="Flex.JustifyContent.End">
                @if (Hasorder)
                {
                    <Tooltip Text="Shopping Cart">
                        <Button Type="@ButtonType.Button" Color="Color.Light"
                            Clicked="OpenDisplayOrderModalAsync"
                            RequiredPolicy="@MarketPlacePermissions.Orders.Create">
                            <Icon Name="IconName.ShoppingCart" IconSize="IconSize.Large">
                            </Icon>
                            <Badge Color="Color.Success">                             
                            </Badge>
                        </Button>
                    </Tooltip>
                }
                else
                {
                    <Button Type="@ButtonType.Button" Color="Color.Light"
                        Clicked="OpenCreateOrderModalAsync"
                        RequiredPolicy="@MarketPlacePermissions.Orders.Create">
                        @L["CreateOrder"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        @* ************************* SEARCH ************************* *@
        @*<Form>*@
        <div id="FilterSection" class="row mt-3">
            <Column ColumnSize="ColumnSize.Is12">
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <TextEdit TValue="string" KeyPress="OnKeyPress" @bind-Text="@Filter.Name" />
                </Field>
            </Column>
        </div>
        @*</Form>*@
        @* ************************* DATA GRID ************************* *@
        <DataGrid TItem="ProductDto"
                  Data="ProductList"
                  ReadData="OnDataGridReadAsync"
                  @bind-SelectedRow="@SelectedProduct"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="ProductDto"
                                Field="Name"
                                Caption="@L["Name"]">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="Description"
                                Caption="@L["Description"]">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="Price"
                                Caption="@L["Price"]">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto">
                    <DisplayTemplate>
                        @if(Hasorder)
                        {
                            <Button Color="Color.Dark" Outline Clicked="(() => OpenAddOrderItemModalAsync())">
                                @*<Icon Name="@GetActiveState(context)" />*@
                                @L["AddProductToOrder"]
                            </Button>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="CreateOrderModal">
@*    <ModalBackdrop />
*@    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["CreateOrder"]</ModalTitle>
                <CloseButton Clicked="() => CreateOrderModal.Hide()" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@CreatingOrder" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@CreatingOrder.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="() => CreateOrderModal.Hide()">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateOrderAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="DisplayOrderDetailsModal">
    @*    <ModalBackdrop />
*@    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["OrderItems"]</ModalTitle>
                <CloseButton Clicked="() => DisplayOrderDetailsModal.Hide()" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@CreatingOrder" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        @if(HasOrderItems)
                        {
                        <CardBody>
                            @* ************************* SEARCH ************************* *@
                            @*<Form>*@
                            <div id="FilterSection" class="row mt-3">
                                <Column ColumnSize="ColumnSize.Is12">
                                    <Field>
                                        <FieldLabel>@L["Name"]</FieldLabel>
                                        <TextEdit TValue="string" KeyPress="OnOrderKeyPress" @bind-Text="@Filter.Name" />
                                    </Field>
                                </Column>
                            </div>
                            @*</Form>*@
                            @* ************************* DATA GRID ************************* *@
                            <DataGrid TItem="OrderDto"
                                      Data="OrderList"
                                      ReadData="OnOrderDataGridReadAsync"
                                      @bind-SelectedRow="@OrderDto"
                                      TotalItems="TotalCount"
                                      ShowPager="true"
                                      Responsive
                                      PageSize="PageSize">
                                <DataGridColumns>
                                    <DataGridColumn TItem="OrderDto"
                                                    Field="Name"
                                                    Caption="@L["Name"]">
                                    </DataGridColumn>                                
                                    <DataGridColumn TItem="OrderDto">
                                        <DisplayTemplate>
                                            <Button Color="Color.Dark" Outline Clicked="(() => DisplayTable())">
                                                @L["DisplayItems"]
                                          </Button>
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn TItem="OrderDto">
                                        <DisplayTemplate>
                                            <Button Color="Color.Dark" Outline Clicked="DeleteOrder">
                                                @L["DeleteOrderItem"]
                                            </Button>
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                 
                                    
                                     <Table hidden="@TableHidden">
                                            <TableHeader>
                                                <TableRow>
                                                    <TableHeaderCell>Product Name</TableHeaderCell>
                                                    <TableHeaderCell>Quantity</TableHeaderCell>
                                                    <TableHeaderCell>Price</TableHeaderCell>
                                                    <TableHeaderCell>Actions</TableHeaderCell>

                                                </TableRow>
                                            </TableHeader>
                                            <TableBody>
                                                @if (Hasorder)
                                                {
                                                    @foreach(var item in OrderDto.OrderItems)
                                                    {
                                                    <TableRow>
                                                       <TableRowCell>ProductName</TableRowCell>
                                                        <TableRowCell>@item.Price</TableRowCell>
                                                        <TableRowCell>@item.Quantity</TableRowCell>
                                                        <TableRowCell>
                                                            <Button Color="Color.Dark" Outline Clicked="() => DeleteOrderItem(item.Id)">
                                                                @L["DeleteOrderItem"]
                                                            </Button>
                                                        </TableRowCell>

                                                    </TableRow>
                                                    }
                                                }
                                                 </TableBody>
                                        </Table>
                                      
                                </DataGridColumns>
                            </DataGrid>
                        </CardBody>
                        }

                        @if (!HasOrderItems)
                        {
                             <Field>
                                <Text TextColor="TextColor.Primary">
                                    You don't have any Orders. Please Add an Order
                                </Text>
                             </Field>                                    
                        }
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="() => DisplayOrderDetailsModal.Hide()">
                    @L["Cancel"]
                </Button>
                @if(Hasorder && OrderDto.OrderItems.Count() != 0)
                {
                    <Button Color="Color.Primary"
                            Type="@ButtonType.Submit"
                            PreventDefaultOnSubmit="true"
                            Clicked="PlaceOrder">
                        @L["Place"]
                    </Button>
                }
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


<Modal @ref="AddorderItemModal">
    @*    <ModalBackdrop />
    *@    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["AddOrderItem"]</ModalTitle>
                <CloseButton Clicked="() => AddorderItemModal.Hide()" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@AddingOrderItem" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"] *</FieldLabel>
                            <NumericEdit Min="1" ValueChanged="@( (int i) => OnQuantityChanged(i) )"
                                         Value="@AddingOrderItem.Quantity">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                       <Field>
                            <FieldLabel>@L["Price"] *</FieldLabel>
                            <NumericEdit @bind-Value="AddingOrderItem.Price" Min="SelectedProduct.Price" ReadOnly />

                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="() => AddorderItemModal.Hide()">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="AddOrderItemAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Snackbar @ref="OrderSnackbar" Color="SnackbarColor.Success">
    <SnackbarBody>
        @L["OrderCreatedYouCanAddToOrder"]
        <SnackbarAction Clicked="@(()=>OrderSnackbar.Hide())">Close</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="OrderItemSnackbar" Color="SnackbarColor.Success">
    <SnackbarBody>
        @L["ProductAddedToCart"]
        <SnackbarAction Clicked="@(()=>OrderItemSnackbar.Hide())">Close</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="OrderPlacedSnackbar" Color="SnackbarColor.Success">
    <SnackbarBody>
        @L["OrderPlaced"]
        <SnackbarAction Clicked="@(()=>OrderPlacedSnackbar.Hide())">Close</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="OrderItemRemovedSnackbar" Color="SnackbarColor.Danger">
    <SnackbarBody>
        @L["OrderItemRemoved"]
        <SnackbarAction Clicked="@(()=>OrderItemRemovedSnackbar.Hide())">Close</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="OrderDeletedSnackbar" Color="SnackbarColor.Danger">
    <SnackbarBody>
        @L["OrderDeleted"]
        <SnackbarAction Clicked="@(()=>OrderDeletedSnackbar.Hide())">Close</SnackbarAction>
    </SnackbarBody>
</Snackbar>


@*@code {
    int quantity;
    public void QuantityChangeHandler(ChangeEventArgs<double?> args)
    {
       

       }

    Task OnQuantityChanged()
    {
        AddingOrderItem.Quantity = 1;
        AddingOrderItem.Price = AddingOrderItem.Quantity * SelectedProduct.Price;

        return Task.CompletedTask;
    }
}*@